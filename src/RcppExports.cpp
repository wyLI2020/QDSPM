// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fc_estbth_BASErhohat
arma::vec fc_estbth_BASErhohat(int Me, int Mpi, arma::vec tauseq, int N, int T, arma::vec y0, arma::mat Z, arma::mat Xbreve, arma::mat W1, arma::mat W2, arma::mat W3, arma::mat secA1, arma::mat secA2, arma::mat Bhatfo_upd, arma::vec phihatf, arma::vec thetahat, arma::vec muhat_T, arma::vec Vhat, double rho_ini);
RcppExport SEXP _QDSPM_fc_estbth_BASErhohat(SEXP MeSEXP, SEXP MpiSEXP, SEXP tauseqSEXP, SEXP NSEXP, SEXP TSEXP, SEXP y0SEXP, SEXP ZSEXP, SEXP XbreveSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP W3SEXP, SEXP secA1SEXP, SEXP secA2SEXP, SEXP Bhatfo_updSEXP, SEXP phihatfSEXP, SEXP thetahatSEXP, SEXP muhat_TSEXP, SEXP VhatSEXP, SEXP rho_iniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Me(MeSEXP);
    Rcpp::traits::input_parameter< int >::type Mpi(MpiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tauseq(tauseqSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xbreve(XbreveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bhatfo_upd(Bhatfo_updSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phihatf(phihatfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muhat_T(muhat_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Vhat(VhatSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ini(rho_iniSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_estbth_BASErhohat(Me, Mpi, tauseq, N, T, y0, Z, Xbreve, W1, W2, W3, secA1, secA2, Bhatfo_upd, phihatf, thetahat, muhat_T, Vhat, rho_ini));
    return rcpp_result_gen;
END_RCPP
}
// fc_estBnum_BASErhohat
arma::mat fc_estBnum_BASErhohat(int Bnum, int dimALL, int Me, int Mpi, arma::vec tauseq, int N, int T, arma::vec y0, arma::mat Z, arma::mat Xbreve, arma::mat W1, arma::mat W2, arma::mat W3, arma::mat secA1, arma::mat secA2, arma::mat Bhatfo_upd, arma::vec phihatf, arma::vec thetahat, arma::vec muhat_T, arma::vec Vhat, double rho_ini);
RcppExport SEXP _QDSPM_fc_estBnum_BASErhohat(SEXP BnumSEXP, SEXP dimALLSEXP, SEXP MeSEXP, SEXP MpiSEXP, SEXP tauseqSEXP, SEXP NSEXP, SEXP TSEXP, SEXP y0SEXP, SEXP ZSEXP, SEXP XbreveSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP W3SEXP, SEXP secA1SEXP, SEXP secA2SEXP, SEXP Bhatfo_updSEXP, SEXP phihatfSEXP, SEXP thetahatSEXP, SEXP muhat_TSEXP, SEXP VhatSEXP, SEXP rho_iniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Bnum(BnumSEXP);
    Rcpp::traits::input_parameter< int >::type dimALL(dimALLSEXP);
    Rcpp::traits::input_parameter< int >::type Me(MeSEXP);
    Rcpp::traits::input_parameter< int >::type Mpi(MpiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tauseq(tauseqSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xbreve(XbreveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bhatfo_upd(Bhatfo_updSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phihatf(phihatfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muhat_T(muhat_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Vhat(VhatSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ini(rho_iniSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_estBnum_BASErhohat(Bnum, dimALL, Me, Mpi, tauseq, N, T, y0, Z, Xbreve, W1, W2, W3, secA1, secA2, Bhatfo_upd, phihatf, thetahat, muhat_T, Vhat, rho_ini));
    return rcpp_result_gen;
END_RCPP
}
// fc_estbth_BASErhocheck
arma::vec fc_estbth_BASErhocheck(int Me, int Mpi, arma::vec tauseq, int N, int T, arma::vec y0, arma::mat Z, arma::mat Xbreve, arma::mat W1, arma::mat W2, arma::mat W3, arma::mat secA1, arma::mat secA2, arma::mat Bcheck_upd, arma::vec phicheckf, arma::vec thetacheck, arma::vec mucheck_T, arma::vec Vcheck, double rho_ini);
RcppExport SEXP _QDSPM_fc_estbth_BASErhocheck(SEXP MeSEXP, SEXP MpiSEXP, SEXP tauseqSEXP, SEXP NSEXP, SEXP TSEXP, SEXP y0SEXP, SEXP ZSEXP, SEXP XbreveSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP W3SEXP, SEXP secA1SEXP, SEXP secA2SEXP, SEXP Bcheck_updSEXP, SEXP phicheckfSEXP, SEXP thetacheckSEXP, SEXP mucheck_TSEXP, SEXP VcheckSEXP, SEXP rho_iniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Me(MeSEXP);
    Rcpp::traits::input_parameter< int >::type Mpi(MpiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tauseq(tauseqSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xbreve(XbreveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bcheck_upd(Bcheck_updSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phicheckf(phicheckfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetacheck(thetacheckSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mucheck_T(mucheck_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Vcheck(VcheckSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ini(rho_iniSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_estbth_BASErhocheck(Me, Mpi, tauseq, N, T, y0, Z, Xbreve, W1, W2, W3, secA1, secA2, Bcheck_upd, phicheckf, thetacheck, mucheck_T, Vcheck, rho_ini));
    return rcpp_result_gen;
END_RCPP
}
// fc_estBnum_BASErhocheck
arma::mat fc_estBnum_BASErhocheck(int Bnum, int dimALL, int Me, int Mpi, arma::vec tauseq, int N, int T, arma::vec y0, arma::mat Z, arma::mat Xbreve, arma::mat W1, arma::mat W2, arma::mat W3, arma::mat secA1, arma::mat secA2, arma::mat Bcheck_upd, arma::vec phicheckf, arma::vec thetacheck, arma::vec mucheck_T, arma::vec Vcheck, double rho_ini);
RcppExport SEXP _QDSPM_fc_estBnum_BASErhocheck(SEXP BnumSEXP, SEXP dimALLSEXP, SEXP MeSEXP, SEXP MpiSEXP, SEXP tauseqSEXP, SEXP NSEXP, SEXP TSEXP, SEXP y0SEXP, SEXP ZSEXP, SEXP XbreveSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP W3SEXP, SEXP secA1SEXP, SEXP secA2SEXP, SEXP Bcheck_updSEXP, SEXP phicheckfSEXP, SEXP thetacheckSEXP, SEXP mucheck_TSEXP, SEXP VcheckSEXP, SEXP rho_iniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Bnum(BnumSEXP);
    Rcpp::traits::input_parameter< int >::type dimALL(dimALLSEXP);
    Rcpp::traits::input_parameter< int >::type Me(MeSEXP);
    Rcpp::traits::input_parameter< int >::type Mpi(MpiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tauseq(tauseqSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xbreve(XbreveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bcheck_upd(Bcheck_updSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phicheckf(phicheckfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetacheck(thetacheckSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mucheck_T(mucheck_TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Vcheck(VcheckSEXP);
    Rcpp::traits::input_parameter< double >::type rho_ini(rho_iniSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_estBnum_BASErhocheck(Bnum, dimALL, Me, Mpi, tauseq, N, T, y0, Z, Xbreve, W1, W2, W3, secA1, secA2, Bcheck_upd, phicheckf, thetacheck, mucheck_T, Vcheck, rho_ini));
    return rcpp_result_gen;
END_RCPP
}
// fc_asmat
arma::mat fc_asmat(arma::vec vec1, int nrow, int ncol);
RcppExport SEXP _QDSPM_fc_asmat(SEXP vec1SEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vec1(vec1SEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_asmat(vec1, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// fc_asvec
arma::vec fc_asvec(arma::mat mat1);
RcppExport SEXP _QDSPM_fc_asvec(SEXP mat1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_asvec(mat1));
    return rcpp_result_gen;
END_RCPP
}
// fc_iota
arma::mat fc_iota(int n);
RcppExport SEXP _QDSPM_fc_iota(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_iota(n));
    return rcpp_result_gen;
END_RCPP
}
// fc_I
arma::mat fc_I(int n);
RcppExport SEXP _QDSPM_fc_I(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_I(n));
    return rcpp_result_gen;
END_RCPP
}
// fc_B
arma::mat fc_B(double rho, int N, arma::mat W3);
RcppExport SEXP _QDSPM_fc_B(SEXP rhoSEXP, SEXP NSEXP, SEXP W3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_B(rho, N, W3));
    return rcpp_result_gen;
END_RCPP
}
// fc_S
arma::mat fc_S(double lambda, int N, arma::mat W1);
RcppExport SEXP _QDSPM_fc_S(SEXP lambdaSEXP, SEXP NSEXP, SEXP W1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_S(lambda, N, W1));
    return rcpp_result_gen;
END_RCPP
}
// fc_MatrixMultip
arma::mat fc_MatrixMultip(arma::mat mat1, arma::mat mat2);
RcppExport SEXP _QDSPM_fc_MatrixMultip(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_MatrixMultip(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// fc_Zbar
arma::mat fc_Zbar(arma::mat Z, int N, int T, int q);
RcppExport SEXP _QDSPM_fc_Zbar(SEXP ZSEXP, SEXP NSEXP, SEXP TSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_Zbar(Z, N, T, q));
    return rcpp_result_gen;
END_RCPP
}
// fc_ITWZ
arma::mat fc_ITWZ(int N, int q, arma::mat Z, arma::mat W);
RcppExport SEXP _QDSPM_fc_ITWZ(SEXP NSEXP, SEXP qSEXP, SEXP ZSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_ITWZ(N, q, Z, W));
    return rcpp_result_gen;
END_RCPP
}
// fc_phitilde
arma::vec fc_phitilde(int N, int T, arma::vec mathbbY, arma::mat mathbbZbreve, arma::mat Q);
RcppExport SEXP _QDSPM_fc_phitilde(SEXP NSEXP, SEXP TSEXP, SEXP mathbbYSEXP, SEXP mathbbZbreveSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mathbbY(mathbbYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mathbbZbreve(mathbbZbreveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_phitilde(N, T, mathbbY, mathbbZbreve, Q));
    return rcpp_result_gen;
END_RCPP
}
// fc_etaest
arma::vec fc_etaest(arma::vec phiest, arma::vec Y, arma::mat Zbreve);
RcppExport SEXP _QDSPM_fc_etaest(SEXP phiestSEXP, SEXP YSEXP, SEXP ZbreveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phiest(phiestSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zbreve(ZbreveSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_etaest(phiest, Y, Zbreve));
    return rcpp_result_gen;
END_RCPP
}
// fc_thetaest
arma::vec fc_thetaest(arma::vec etaest, int N, int T);
RcppExport SEXP _QDSPM_fc_thetaest(SEXP etaestSEXP, SEXP NSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type etaest(etaestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_thetaest(etaest, N, T));
    return rcpp_result_gen;
END_RCPP
}
// fc_etaestMINUSiotaTthetaest
arma::vec fc_etaestMINUSiotaTthetaest(arma::vec etaest, arma::vec thetaest, int T);
RcppExport SEXP _QDSPM_fc_etaestMINUSiotaTthetaest(SEXP etaestSEXP, SEXP thetaestSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type etaest(etaestSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetaest(thetaestSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_etaestMINUSiotaTthetaest(etaest, thetaest, T));
    return rcpp_result_gen;
END_RCPP
}
// fc_muTest
arma::vec fc_muTest(arma::vec etaest_minus_iotaTthetaest, int N, int T);
RcppExport SEXP _QDSPM_fc_muTest(SEXP etaest_minus_iotaTthetaestSEXP, SEXP NSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type etaest_minus_iotaTthetaest(etaest_minus_iotaTthetaestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_muTest(etaest_minus_iotaTthetaest, N, T));
    return rcpp_result_gen;
END_RCPP
}
// fc_secA1
arma::mat fc_secA1(arma::mat W3, int N);
RcppExport SEXP _QDSPM_fc_secA1(SEXP W3SEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_secA1(W3, N));
    return rcpp_result_gen;
END_RCPP
}
// fc_Lambda1lambda1
arma::mat fc_Lambda1lambda1(arma::vec Vtilde, int N, int T, arma::mat W3, arma::mat secA1, arma::mat secA2);
RcppExport SEXP _QDSPM_fc_Lambda1lambda1(SEXP VtildeSEXP, SEXP NSEXP, SEXP TSEXP, SEXP W3SEXP, SEXP secA1SEXP, SEXP secA2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Vtilde(VtildeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_Lambda1lambda1(Vtilde, N, T, W3, secA1, secA2));
    return rcpp_result_gen;
END_RCPP
}
// fc_varepsilonest
arma::vec fc_varepsilonest(arma::mat Best, arma::vec Vest, int N, int T);
RcppExport SEXP _QDSPM_fc_varepsilonest(SEXP BestSEXP, SEXP VestSEXP, SEXP NSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Best(BestSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Vest(VestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_varepsilonest(Best, Vest, N, T));
    return rcpp_result_gen;
END_RCPP
}
// fc_sigmavarepsilonsquareest
arma::vec fc_sigmavarepsilonsquareest(arma::vec varepsilonest, int N, int T);
RcppExport SEXP _QDSPM_fc_sigmavarepsilonsquareest(SEXP varepsilonestSEXP, SEXP NSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type varepsilonest(varepsilonestSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_sigmavarepsilonsquareest(varepsilonest, N, T));
    return rcpp_result_gen;
END_RCPP
}
// fc_Sigmagest
arma::mat fc_Sigmagest(arma::vec sigmavarepsilonsquareest, arma::mat secA1, arma::mat secA2, int N);
RcppExport SEXP _QDSPM_fc_Sigmagest(SEXP sigmavarepsilonsquareestSEXP, SEXP secA1SEXP, SEXP secA2SEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type sigmavarepsilonsquareest(sigmavarepsilonsquareestSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA1(secA1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type secA2(secA2SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_Sigmagest(sigmavarepsilonsquareest, secA1, secA2, N));
    return rcpp_result_gen;
END_RCPP
}
// fc_kappacheck
arma::vec fc_kappacheck(arma::mat Lambda1, arma::vec lambda1);
RcppExport SEXP _QDSPM_fc_kappacheck(SEXP Lambda1SEXP, SEXP lambda1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1(lambda1SEXP);
    rcpp_result_gen = Rcpp::wrap(fc_kappacheck(Lambda1, lambda1));
    return rcpp_result_gen;
END_RCPP
}
// fc_phihatf
arma::vec fc_phihatf(int N, int T, int q, arma::vec Y, arma::mat Zbreve, arma::vec thetatilde, arma::vec mutilde_NT, arma::mat Bhat, arma::mat H);
RcppExport SEXP _QDSPM_fc_phihatf(SEXP NSEXP, SEXP TSEXP, SEXP qSEXP, SEXP YSEXP, SEXP ZbreveSEXP, SEXP thetatildeSEXP, SEXP mutilde_NTSEXP, SEXP BhatSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zbreve(ZbreveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetatilde(thetatildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mutilde_NT(mutilde_NTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bhat(BhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_phihatf(N, T, q, Y, Zbreve, thetatilde, mutilde_NT, Bhat, H));
    return rcpp_result_gen;
END_RCPP
}
// fc_varepsilonast
arma::vec fc_varepsilonast(arma::vec east, arma::vec varepsilonhat);
RcppExport SEXP _QDSPM_fc_varepsilonast(SEXP eastSEXP, SEXP varepsilonhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type east(eastSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type varepsilonhat(varepsilonhatSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_varepsilonast(east, varepsilonhat));
    return rcpp_result_gen;
END_RCPP
}
// f_Yastmat_Generation
arma::mat f_Yastmat_Generation(arma::vec varepsilonast, int N, int T, int q, arma::vec y0, arma::vec phihatf, arma::vec thetahat, arma::vec muhat_T, arma::cube Zarray, arma::mat W1, arma::mat W2, arma::mat Bhat);
RcppExport SEXP _QDSPM_f_Yastmat_Generation(SEXP varepsilonastSEXP, SEXP NSEXP, SEXP TSEXP, SEXP qSEXP, SEXP y0SEXP, SEXP phihatfSEXP, SEXP thetahatSEXP, SEXP muhat_TSEXP, SEXP ZarraySEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP BhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type varepsilonast(varepsilonastSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phihatf(phihatfSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetahat(thetahatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muhat_T(muhat_TSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Zarray(ZarraySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bhat(BhatSEXP);
    rcpp_result_gen = Rcpp::wrap(f_Yastmat_Generation(varepsilonast, N, T, q, y0, phihatf, thetahat, muhat_T, Zarray, W1, W2, Bhat));
    return rcpp_result_gen;
END_RCPP
}
// fc_Rrho
arma::mat fc_Rrho(arma::mat Lambda1, arma::vec lambda1, arma::mat aTa, arma::vec kappa);
RcppExport SEXP _QDSPM_fc_Rrho(SEXP Lambda1SEXP, SEXP lambda1SEXP, SEXP aTaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type aTa(aTaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(fc_Rrho(Lambda1, lambda1, aTa, kappa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QDSPM_fc_estbth_BASErhohat", (DL_FUNC) &_QDSPM_fc_estbth_BASErhohat, 19},
    {"_QDSPM_fc_estBnum_BASErhohat", (DL_FUNC) &_QDSPM_fc_estBnum_BASErhohat, 21},
    {"_QDSPM_fc_estbth_BASErhocheck", (DL_FUNC) &_QDSPM_fc_estbth_BASErhocheck, 19},
    {"_QDSPM_fc_estBnum_BASErhocheck", (DL_FUNC) &_QDSPM_fc_estBnum_BASErhocheck, 21},
    {"_QDSPM_fc_asmat", (DL_FUNC) &_QDSPM_fc_asmat, 3},
    {"_QDSPM_fc_asvec", (DL_FUNC) &_QDSPM_fc_asvec, 1},
    {"_QDSPM_fc_iota", (DL_FUNC) &_QDSPM_fc_iota, 1},
    {"_QDSPM_fc_I", (DL_FUNC) &_QDSPM_fc_I, 1},
    {"_QDSPM_fc_B", (DL_FUNC) &_QDSPM_fc_B, 3},
    {"_QDSPM_fc_S", (DL_FUNC) &_QDSPM_fc_S, 3},
    {"_QDSPM_fc_MatrixMultip", (DL_FUNC) &_QDSPM_fc_MatrixMultip, 2},
    {"_QDSPM_fc_Zbar", (DL_FUNC) &_QDSPM_fc_Zbar, 4},
    {"_QDSPM_fc_ITWZ", (DL_FUNC) &_QDSPM_fc_ITWZ, 4},
    {"_QDSPM_fc_phitilde", (DL_FUNC) &_QDSPM_fc_phitilde, 5},
    {"_QDSPM_fc_etaest", (DL_FUNC) &_QDSPM_fc_etaest, 3},
    {"_QDSPM_fc_thetaest", (DL_FUNC) &_QDSPM_fc_thetaest, 3},
    {"_QDSPM_fc_etaestMINUSiotaTthetaest", (DL_FUNC) &_QDSPM_fc_etaestMINUSiotaTthetaest, 3},
    {"_QDSPM_fc_muTest", (DL_FUNC) &_QDSPM_fc_muTest, 3},
    {"_QDSPM_fc_secA1", (DL_FUNC) &_QDSPM_fc_secA1, 2},
    {"_QDSPM_fc_Lambda1lambda1", (DL_FUNC) &_QDSPM_fc_Lambda1lambda1, 6},
    {"_QDSPM_fc_varepsilonest", (DL_FUNC) &_QDSPM_fc_varepsilonest, 4},
    {"_QDSPM_fc_sigmavarepsilonsquareest", (DL_FUNC) &_QDSPM_fc_sigmavarepsilonsquareest, 3},
    {"_QDSPM_fc_Sigmagest", (DL_FUNC) &_QDSPM_fc_Sigmagest, 4},
    {"_QDSPM_fc_kappacheck", (DL_FUNC) &_QDSPM_fc_kappacheck, 2},
    {"_QDSPM_fc_phihatf", (DL_FUNC) &_QDSPM_fc_phihatf, 9},
    {"_QDSPM_fc_varepsilonast", (DL_FUNC) &_QDSPM_fc_varepsilonast, 2},
    {"_QDSPM_f_Yastmat_Generation", (DL_FUNC) &_QDSPM_f_Yastmat_Generation, 12},
    {"_QDSPM_fc_Rrho", (DL_FUNC) &_QDSPM_fc_Rrho, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_QDSPM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
